name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  IMAGE_NAME: book-recommendation-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Generate test coverage
      run: npm run test:coverage
    
    - name: Run security audit
      run: npm audit --audit-level moderate || echo "Audit completed with findings"
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: coverage/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Trivy
      run: |
        sudo apt-get update
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
    
    - name: Run Trivy filesystem scan
      run: |
        echo "Running filesystem security scan..."
        trivy fs . --exit-code 0 --format sarif --output trivy-fs-results.sarif || echo "Scan completed with findings"
    
    - name: Upload Trivy filesystem scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-fs-sarif-results
        path: trivy-fs-results.sarif
        retention-days: 7
    
    - name: Upload to Code Scanning (Main Branch Only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'
        wait-for-processing: false

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: ${{ env.IMAGE_NAME }}:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Install Trivy for image scanning
      run: |
        sudo apt-get update
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
    
    - name: Scan Docker image with Trivy
      run: |
        echo "Scanning Docker image for vulnerabilities..."
        trivy image ${{ env.IMAGE_NAME }}:latest --exit-code 0 --format sarif --output trivy-image-results.sarif || echo "Scan completed with findings"
    
    - name: Upload Trivy image scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-image-sarif-results
        path: trivy-image-results.sarif
        retention-days: 7
    
    - name: Upload image scan to Code Scanning
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'
        wait-for-processing: false
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubernetes
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install kubectl /usr/local/bin/kubectl
        minikube start --driver=docker --force
    
    - name: Build and deploy
      run: |
        # Build in Minikube environment
        eval $(minikube docker-env)
        docker build -t book-recommendation-api:latest .
        
        # Deploy
        kubectl apply -f kubernetes/
        
        echo "Deployment applied. Waiting up to 10 minutes for pods..."
        
        # Simple wait with timeout
        timeout 600s bash -c '
          while true; do
            PODS_READY=$(kubectl get pods -l app=book-api -o jsonpath="{.items[*].status.conditions[?(@.type==\"Ready\")].status}" 2>/dev/null | grep -o "True" | wc -l)
            PODS_TOTAL=$(kubectl get pods -l app=book-api --no-headers 2>/dev/null | wc -l)
            
            if [ "$PODS_READY" -eq "$PODS_TOTAL" ] && [ "$PODS_TOTAL" -gt 0 ]; then
              echo "✅ All pods are ready!"
              kubectl get pods -l app=book-api
              break
            fi
            
            echo "$(date): Ready: $PODS_READY/$PODS_TOTAL pods"
            sleep 10
          done
        '
    
    - name: Show deployment status
      run: |
        echo "=== Final Deployment Status ==="
        kubectl get all
        echo "=== Pod Details ==="
        kubectl get pods -o wide

  integration-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=docker --force
    
    - name: Run integration tests
      run: |
        # Get service URL
        SERVICE_URL=$(minikube service book-api-service --url)
        echo "Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        timeout 60s bash -c 'until curl -f $SERVICE_URL/health; do sleep 5; done'
        
        # Run integration tests
        curl -f $SERVICE_URL/health
        curl -f $SERVICE_URL/books | jq '.success' | grep true
        curl -f $SERVICE_URL/metrics | jq '.books.total' | grep 10
        
        echo "✅ All integration tests passed!"